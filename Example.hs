{-# LANGUAGE DamlSyntax #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleContexts #-}

module Example where

{-
This file contains an example of a DAML template which can be compiled, desugared, and type-check:
$ ./_build/stage1/bin/ghc ./Example.hs

A minimal environment (to support the code generated by desugaring) is provided in:
  ./DA/Internal/Desugar.hs
  ./GHC/Types.hs
-}

import DA.Internal.Desugar
import GHC.Types

data IV = IV {}
data JV = JV {}
data KV = KV with
  iv : IV
  jv : JV
  kv : Int

interface I where
  viewtype IV

interface J where
  viewtype JV

interface K where
  myInternalValue : Int
  viewtype KV

template TheTemplate
  with
    s : Party
  where
    signatory s
    agreement "my agreement"

    choice MyObservedChoice : () with obs : [Party]
      observer obs
      controller s
      do return ()

    interface instance I for TheTemplate where view = IV
    interface instance J for TheTemplate where view = JV

    interface instance K for TheTemplate where
      myInternalValue = 1000
      view = KV with
        iv = view @I (toInterface this)
        jv = view @J (toInterface this)
        kv = myInternalValue (toInterface this) * 1000

interface AnotherInterface where
  someBool : Bool
  viewtype Ordering

  interface instance AnotherInterface for TheTemplate where
    someBool = False
    view = if someBool (toInterface @AnotherInterface this) then GT else LT

f : (a,b,c,d,e,f) -> (f,a,b,c,d,e)
f (a,b,c,d,e,f) = (f,a,b,c,d,e)

data Zero = Zero
instance HasField "val" Zero Int where
  getField _ = 0
  setField _ r = r

g0 : Int
g0 = getField @"noval" Zero

g1 : Char
g1 = getField @"val" Zero
