{-# LANGUAGE DamlSyntax #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleContexts #-}

module Example where

{-
This file contains an example of a DAML template which can be compiled, desugared, and type-check:
$ ./_build/stage1/bin/ghc ./Example.hs

A minimal environment (to support the code generated by desugaring) is provided in:
  ./libraries/base/GHC/Daml/Minimal.hs

That module is part of the `base` library when building from the
`digital-asset/ghc` repository, and includes definitions from `daml-prim` and
`daml-stdlib` that would appear in various modules in the
`digital-asset/daml` repository, e.g. `daml-prim:GHC.Types` and
`daml-stdlib:DA.Internal.Desugar`

Since some of the generated code refers to types and values qualified with these
modules, we import GHC.Daml qualified as each of them, and unqualified.
-}

import GHC.Daml.Minimal
import GHC.Daml.Minimal qualified as DA.Internal.Desugar
import GHC.Daml.Minimal qualified as GHC.Types

interface TheInterface where
  myInternalValue : Int
  viewtype Int

template TheTemplate
  with
    s : Party
  where
    signatory s
    agreement "my agreement"

    choice MyObservedChoice : () with obs : [Party]
      observer obs
      controller s
      do return ()

    interface instance TheInterface for TheTemplate where
      myInternalValue = 1000
      view = myInternalValue (toInterface @TheInterface this) * 1000

interface AnotherInterface where
  someBool : Bool
  viewtype Ordering

  interface instance AnotherInterface for TheTemplate where
    someBool = False
    view = if someBool (toInterface @AnotherInterface this) then GT else LT
